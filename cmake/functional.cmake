function(check_c_cxx_compiler)
    set(idx 0)
    while(idx LESS ${ARGC})
        list(APPEND valid_compilers ${ARGV${idx}})
        math(EXPR idx "${idx}+1")
    endwhile()
    function(_check_compiler compiler)
        set(is_valid FALSE)
        foreach(valid_compiler ${valid_compilers})
            if(${valid_compiler} STREQUAL ${compiler})
                set(is_valid TRUE)
                break()
            endif()
        endforeach()
        if(NOT is_valid)
            message(FATAL_ERROR "invalid compiler")
        endif()
    endfunction()
    _check_compiler(${CMAKE_CXX_COMPILER_ID})
    _check_compiler(${CMAKE_C_COMPILER_ID})
endfunction()

list(
    APPEND
    cxx_extensions
    .cc
    .cxx
    .cpp
    .hpp
    .hxx)
list(APPEND c_extensions .c .h)

function(compile_library)
    set(library_source_files)
    set(lib_name ${ARGV0})
    set(lib_type ${ARGV1})
    set(enable_cxx_compile ${ARGV2})
    message(STATUS "enable cxx:${enable_cxx_compile}")
    set(compile_dirs)
    set(param_idx 3)
    while(param_idx LESS ${ARGC})
        set(param ${ARGV${param_idx}})
        message(STATUS ${param})
        if(param STREQUAL EXCLUDE)
            break()
        endif()
        list(APPEND compile_dirs ${param})
        math(EXPR param_idx "${param_idx}+1")
    endwhile()
    math(EXPR param_idx "${param_idx}+1")
    while(param_idx LESS ${ARGC})
        set(exclude ${ARGV${param_idx}})
        set(matched)
        string(REGEX MATCH "[^/]+(/[^/]+)*" matched ${exclude})
        if(NOT matched STREQUAL exclude)
            message(STATUS "exclude changed:${exclude}->${matched}")
            set(exclude ${matched})
        endif()
        list(APPEND exclude_dirs ${exclude})
        math(EXPR param_idx "${param_idx}+1")
    endwhile()
    while(compile_dirs)
        list(POP_FRONT compile_dirs current_dir)
        if(NOT IS_DIRECTORY ${current_dir})
            message(SEND_ERROR "not directory:${current_dir}")
            continue()
        endif()
        set(accept TRUE)
        foreach(exclude ${exclude_dirs})
            string(REGEX MATCH "/${exclude}$|/${exclude}/" matched
                         ${current_dir})
            if(matched STREQUAL "/${exclude}" OR matched STREQUAL
                                                 "/${exclude}/")
                set(accept FALSE)
                break()
            endif()
        endforeach()
        if(NOT accept)
            message(WARNING "ignore directory: ${current_dir}")
            continue()
        endif()
        file(GLOB current_files ${current_dir}/*)
        foreach(path ${current_files})
            if(IS_DIRECTORY ${path})
                list(APPEND compile_dirs ${path})
                continue()
            endif()
            set(add_path FALSE)
            get_filename_component(file_last_ext ${path} LAST_EXT)
            foreach(c_ext ${c_extensions})
                if(c_ext STREQUAL "${file_last_ext}")
                    set(add_path TRUE)
                    break()
                endif()
            endforeach()
            if(NOT add_path AND enable_cxx_compile)
                foreach(cxx_ext ${cxx_extensions})
                    if(file_last_ext STREQUAL "${cxx_ext}")
                        set(add_path TRUE)
                        break()
                    endif()
                endforeach()
            endif()
            if(add_path)
                list(APPEND library_source_files ${path})
            else()
                message(WARNING "ignore file: ${path}")
            endif()
        endforeach()
    endwhile()
    if(library_source_files)
        foreach(file ${library_source_files})
            message(STATUS "compile source file:${file}")
        endforeach()
    else()
        message(WARNING "no source files given")
        return()
    endif()
    message(STATUS ${lib_type})
    if(lib_type STREQUAL "static")
        add_library(${lib_name} STATIC ${library_source_files})
    else()
        add_library(${lib_name} SHARED ${library_source_files})
    endif()
endfunction()

function(set_arch_compile_flags)
    set(x86 ${ARGV0})
    if(MSVC)
        message(WARNING "msvc using generator to specify cpu architecture")
    elseif(APPLE)
        message(
            FATAL_ERROR "x86 architecture is not supported on apple platform")
    else()
        set(unix_compilers GNU Clang AppClang)
        foreach(compiler ${unix_compilers})
            if(CMAKE_C_COMPILER_ID STREQUAL ${compiler})
                if(x86)
                    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
                else()
                    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
                endif()
            endif()
            if(CMAKE_CXX_COMPILER_ID STREQUAL ${compiler})
                if(x86)
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
                else()
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
                endif()
            endif()
        endforeach()
    endif()
endfunction()
